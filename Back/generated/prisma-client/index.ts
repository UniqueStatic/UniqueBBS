// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  attach: (where?: AttachWhereInput) => Promise<boolean>;
  forum: (where?: ForumWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  thread: (where?: ThreadWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attach: (where: AttachWhereUniqueInput) => AttachPromise;
  attaches: (
    args?: {
      where?: AttachWhereInput;
      orderBy?: AttachOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Attach>;
  attachesConnection: (
    args?: {
      where?: AttachWhereInput;
      orderBy?: AttachOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AttachConnectionPromise;
  forum: (where: ForumWhereUniqueInput) => ForumPromise;
  forums: (
    args?: {
      where?: ForumWhereInput;
      orderBy?: ForumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Forum>;
  forumsConnection: (
    args?: {
      where?: ForumWhereInput;
      orderBy?: ForumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ForumConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupPromise;
  groups: (
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Group>;
  groupsConnection: (
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GroupConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Message>;
  messagesConnection: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MessageConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  thread: (where: ThreadWhereUniqueInput) => ThreadPromise;
  threads: (
    args?: {
      where?: ThreadWhereInput;
      orderBy?: ThreadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Thread>;
  threadsConnection: (
    args?: {
      where?: ThreadWhereInput;
      orderBy?: ThreadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ThreadConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttach: (data: AttachCreateInput) => AttachPromise;
  updateAttach: (
    args: { data: AttachUpdateInput; where: AttachWhereUniqueInput }
  ) => AttachPromise;
  updateManyAttaches: (
    args: { data: AttachUpdateManyMutationInput; where?: AttachWhereInput }
  ) => BatchPayloadPromise;
  upsertAttach: (
    args: {
      where: AttachWhereUniqueInput;
      create: AttachCreateInput;
      update: AttachUpdateInput;
    }
  ) => AttachPromise;
  deleteAttach: (where: AttachWhereUniqueInput) => AttachPromise;
  deleteManyAttaches: (where?: AttachWhereInput) => BatchPayloadPromise;
  createForum: (data: ForumCreateInput) => ForumPromise;
  updateForum: (
    args: { data: ForumUpdateInput; where: ForumWhereUniqueInput }
  ) => ForumPromise;
  updateManyForums: (
    args: { data: ForumUpdateManyMutationInput; where?: ForumWhereInput }
  ) => BatchPayloadPromise;
  upsertForum: (
    args: {
      where: ForumWhereUniqueInput;
      create: ForumCreateInput;
      update: ForumUpdateInput;
    }
  ) => ForumPromise;
  deleteForum: (where: ForumWhereUniqueInput) => ForumPromise;
  deleteManyForums: (where?: ForumWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (
    args: { data: GroupUpdateInput; where: GroupWhereUniqueInput }
  ) => GroupPromise;
  updateManyGroups: (
    args: { data: GroupUpdateManyMutationInput; where?: GroupWhereInput }
  ) => BatchPayloadPromise;
  upsertGroup: (
    args: {
      where: GroupWhereUniqueInput;
      create: GroupCreateInput;
      update: GroupUpdateInput;
    }
  ) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (
    args: { data: MessageUpdateInput; where: MessageWhereUniqueInput }
  ) => MessagePromise;
  updateManyMessages: (
    args: { data: MessageUpdateManyMutationInput; where?: MessageWhereInput }
  ) => BatchPayloadPromise;
  upsertMessage: (
    args: {
      where: MessageWhereUniqueInput;
      create: MessageCreateInput;
      update: MessageUpdateInput;
    }
  ) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createThread: (data: ThreadCreateInput) => ThreadPromise;
  updateThread: (
    args: { data: ThreadUpdateInput; where: ThreadWhereUniqueInput }
  ) => ThreadPromise;
  updateManyThreads: (
    args: { data: ThreadUpdateManyMutationInput; where?: ThreadWhereInput }
  ) => BatchPayloadPromise;
  upsertThread: (
    args: {
      where: ThreadWhereUniqueInput;
      create: ThreadCreateInput;
      update: ThreadUpdateInput;
    }
  ) => ThreadPromise;
  deleteThread: (where: ThreadWhereUniqueInput) => ThreadPromise;
  deleteManyThreads: (where?: ThreadWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attach: (
    where?: AttachSubscriptionWhereInput
  ) => AttachSubscriptionPayloadSubscription;
  forum: (
    where?: ForumSubscriptionWhereInput
  ) => ForumSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  thread: (
    where?: ThreadSubscriptionWhereInput
  ) => ThreadSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "key_ASC"
  | "key_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isFirst_ASC"
  | "isFirst_DESC"
  | "quote_ASC"
  | "quote_DESC"
  | "message_ASC"
  | "message_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttachOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "filesize_ASC"
  | "filesize_DESC"
  | "downloads_ASC"
  | "downloads_DESC"
  | "fileName_ASC"
  | "fileName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ForumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "threads_ASC"
  | "threads_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "message_ASC"
  | "message_DESC"
  | "isRead_ASC"
  | "isRead_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ThreadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "active_ASC"
  | "active_DESC"
  | "postCount_ASC"
  | "postCount_DESC"
  | "top_ASC"
  | "top_DESC"
  | "closed_ASC"
  | "closed_DESC"
  | "diamond_ASC"
  | "diamond_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "active_ASC"
  | "active_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "userid_ASC"
  | "userid_DESC"
  | "isAdmin_ASC"
  | "isAdmin_DESC"
  | "posts_ASC"
  | "posts_DESC"
  | "lastLogin_ASC"
  | "lastLogin_DESC"
  | "signature_ASC"
  | "signature_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AttachWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GroupWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  master?: UserWhereInput;
  key?: Int;
  key_not?: Int;
  key_in?: Int[] | Int;
  key_not_in?: Int[] | Int;
  key_lt?: Int;
  key_lte?: Int;
  key_gt?: Int;
  key_gte?: Int;
  AND?: GroupWhereInput[] | GroupWhereInput;
  OR?: GroupWhereInput[] | GroupWhereInput;
  NOT?: GroupWhereInput[] | GroupWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  active?: Boolean;
  active_not?: Boolean;
  mobile?: String;
  mobile_not?: String;
  mobile_in?: String[] | String;
  mobile_not_in?: String[] | String;
  mobile_lt?: String;
  mobile_lte?: String;
  mobile_gt?: String;
  mobile_gte?: String;
  mobile_contains?: String;
  mobile_not_contains?: String;
  mobile_starts_with?: String;
  mobile_not_starts_with?: String;
  mobile_ends_with?: String;
  mobile_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  userid?: String;
  userid_not?: String;
  userid_in?: String[] | String;
  userid_not_in?: String[] | String;
  userid_lt?: String;
  userid_lte?: String;
  userid_gt?: String;
  userid_gte?: String;
  userid_contains?: String;
  userid_not_contains?: String;
  userid_starts_with?: String;
  userid_not_starts_with?: String;
  userid_ends_with?: String;
  userid_not_ends_with?: String;
  isAdmin?: Boolean;
  isAdmin_not?: Boolean;
  group_every?: GroupWhereInput;
  group_some?: GroupWhereInput;
  group_none?: GroupWhereInput;
  posts?: Int;
  posts_not?: Int;
  posts_in?: Int[] | Int;
  posts_not_in?: Int[] | Int;
  posts_lt?: Int;
  posts_lte?: Int;
  posts_gt?: Int;
  posts_gte?: Int;
  lastLogin?: DateTimeInput;
  lastLogin_not?: DateTimeInput;
  lastLogin_in?: DateTimeInput[] | DateTimeInput;
  lastLogin_not_in?: DateTimeInput[] | DateTimeInput;
  lastLogin_lt?: DateTimeInput;
  lastLogin_lte?: DateTimeInput;
  lastLogin_gt?: DateTimeInput;
  lastLogin_gte?: DateTimeInput;
  signature?: String;
  signature_not?: String;
  signature_in?: String[] | String;
  signature_not_in?: String[] | String;
  signature_lt?: String;
  signature_lte?: String;
  signature_gt?: String;
  signature_gte?: String;
  signature_contains?: String;
  signature_not_contains?: String;
  signature_starts_with?: String;
  signature_not_starts_with?: String;
  signature_ends_with?: String;
  signature_not_ends_with?: String;
  mentor?: UserWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  forum?: ForumWhereInput;
  user?: UserWhereInput;
  thread?: ThreadWhereInput;
  isFirst?: Boolean;
  isFirst_not?: Boolean;
  quote?: Int;
  quote_not?: Int;
  quote_in?: Int[] | Int;
  quote_not_in?: Int[] | Int;
  quote_lt?: Int;
  quote_lte?: Int;
  quote_gt?: Int;
  quote_gte?: Int;
  message?: String;
  message_not?: String;
  message_in?: String[] | String;
  message_not_in?: String[] | String;
  message_lt?: String;
  message_lte?: String;
  message_gt?: String;
  message_gte?: String;
  message_contains?: String;
  message_not_contains?: String;
  message_starts_with?: String;
  message_not_starts_with?: String;
  message_ends_with?: String;
  message_not_ends_with?: String;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface ForumWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  threads?: Int;
  threads_not?: Int;
  threads_in?: Int[] | Int;
  threads_not_in?: Int[] | Int;
  threads_lt?: Int;
  threads_lte?: Int;
  threads_gt?: Int;
  threads_gte?: Int;
  lastPost?: PostWhereInput;
  AND?: ForumWhereInput[] | ForumWhereInput;
  OR?: ForumWhereInput[] | ForumWhereInput;
  NOT?: ForumWhereInput[] | ForumWhereInput;
}

export interface ThreadWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  forum?: ForumWhereInput;
  subject?: String;
  subject_not?: String;
  subject_in?: String[] | String;
  subject_not_in?: String[] | String;
  subject_lt?: String;
  subject_lte?: String;
  subject_gt?: String;
  subject_gte?: String;
  subject_contains?: String;
  subject_not_contains?: String;
  subject_starts_with?: String;
  subject_not_starts_with?: String;
  subject_ends_with?: String;
  subject_not_ends_with?: String;
  active?: Boolean;
  active_not?: Boolean;
  postCount?: Int;
  postCount_not?: Int;
  postCount_in?: Int[] | Int;
  postCount_not_in?: Int[] | Int;
  postCount_lt?: Int;
  postCount_lte?: Int;
  postCount_gt?: Int;
  postCount_gte?: Int;
  post_every?: PostWhereInput;
  post_some?: PostWhereInput;
  post_none?: PostWhereInput;
  top?: Boolean;
  top_not?: Boolean;
  closed?: Boolean;
  closed_not?: Boolean;
  diamond?: Boolean;
  diamond_not?: Boolean;
  attach_every?: AttachWhereInput;
  attach_some?: AttachWhereInput;
  attach_none?: AttachWhereInput;
  AND?: ThreadWhereInput[] | ThreadWhereInput;
  OR?: ThreadWhereInput[] | ThreadWhereInput;
  NOT?: ThreadWhereInput[] | ThreadWhereInput;
}

export interface AttachWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  post?: PostWhereInput;
  thread?: ThreadWhereInput;
  forum?: ForumWhereInput;
  filesize?: Int;
  filesize_not?: Int;
  filesize_in?: Int[] | Int;
  filesize_not_in?: Int[] | Int;
  filesize_lt?: Int;
  filesize_lte?: Int;
  filesize_gt?: Int;
  filesize_gte?: Int;
  downloads?: Int;
  downloads_not?: Int;
  downloads_in?: Int[] | Int;
  downloads_not_in?: Int[] | Int;
  downloads_lt?: Int;
  downloads_lte?: Int;
  downloads_gt?: Int;
  downloads_gte?: Int;
  fileName?: String;
  fileName_not?: String;
  fileName_in?: String[] | String;
  fileName_not_in?: String[] | String;
  fileName_lt?: String;
  fileName_lte?: String;
  fileName_gt?: String;
  fileName_gte?: String;
  fileName_contains?: String;
  fileName_not_contains?: String;
  fileName_starts_with?: String;
  fileName_not_starts_with?: String;
  fileName_ends_with?: String;
  fileName_not_ends_with?: String;
  AND?: AttachWhereInput[] | AttachWhereInput;
  OR?: AttachWhereInput[] | AttachWhereInput;
  NOT?: AttachWhereInput[] | AttachWhereInput;
}

export type ForumWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type GroupWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  key?: Int;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fromUser?: UserWhereInput;
  toUser?: UserWhereInput;
  message?: String;
  message_not?: String;
  message_in?: String[] | String;
  message_not_in?: String[] | String;
  message_lt?: String;
  message_lte?: String;
  message_gt?: String;
  message_gte?: String;
  message_contains?: String;
  message_not_contains?: String;
  message_starts_with?: String;
  message_not_starts_with?: String;
  message_ends_with?: String;
  message_not_ends_with?: String;
  isRead?: Boolean;
  isRead_not?: Boolean;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ThreadWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  userid?: String;
}>;

export interface AttachCreateInput {
  user: UserCreateOneInput;
  post: PostCreateOneInput;
  thread: ThreadCreateOneWithoutAttachInput;
  forum: ForumCreateOneInput;
  filesize: Int;
  downloads?: Int;
  fileName: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  username: String;
  active?: Boolean;
  mobile?: String;
  avatar?: String;
  userid: String;
  isAdmin?: Boolean;
  group?: GroupCreateManyWithoutMasterInput;
  posts?: Int;
  lastLogin: DateTimeInput;
  signature?: String;
  mentor?: UserCreateOneInput;
}

export interface GroupCreateManyWithoutMasterInput {
  create?: GroupCreateWithoutMasterInput[] | GroupCreateWithoutMasterInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
}

export interface GroupCreateWithoutMasterInput {
  name: String;
  key: Int;
}

export interface PostCreateOneInput {
  create?: PostCreateInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateInput {
  forum: ForumCreateOneWithoutLastPostInput;
  user: UserCreateOneInput;
  thread: ThreadCreateOneWithoutPostInput;
  isFirst?: Boolean;
  quote?: Int;
  message: String;
}

export interface ForumCreateOneWithoutLastPostInput {
  create?: ForumCreateWithoutLastPostInput;
  connect?: ForumWhereUniqueInput;
}

export interface ForumCreateWithoutLastPostInput {
  name: String;
  threads?: Int;
}

export interface ThreadCreateOneWithoutPostInput {
  create?: ThreadCreateWithoutPostInput;
  connect?: ThreadWhereUniqueInput;
}

export interface ThreadCreateWithoutPostInput {
  user: UserCreateOneInput;
  forum: ForumCreateOneInput;
  subject: String;
  active?: Boolean;
  postCount?: Int;
  top?: Boolean;
  closed?: Boolean;
  diamond?: Boolean;
  attach?: AttachCreateManyWithoutThreadInput;
}

export interface ForumCreateOneInput {
  create?: ForumCreateInput;
  connect?: ForumWhereUniqueInput;
}

export interface ForumCreateInput {
  name: String;
  threads?: Int;
  lastPost?: PostCreateOneWithoutForumInput;
}

export interface PostCreateOneWithoutForumInput {
  create?: PostCreateWithoutForumInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateWithoutForumInput {
  user: UserCreateOneInput;
  thread: ThreadCreateOneWithoutPostInput;
  isFirst?: Boolean;
  quote?: Int;
  message: String;
}

export interface AttachCreateManyWithoutThreadInput {
  create?: AttachCreateWithoutThreadInput[] | AttachCreateWithoutThreadInput;
  connect?: AttachWhereUniqueInput[] | AttachWhereUniqueInput;
}

export interface AttachCreateWithoutThreadInput {
  user: UserCreateOneInput;
  post: PostCreateOneInput;
  forum: ForumCreateOneInput;
  filesize: Int;
  downloads?: Int;
  fileName: String;
}

export interface ThreadCreateOneWithoutAttachInput {
  create?: ThreadCreateWithoutAttachInput;
  connect?: ThreadWhereUniqueInput;
}

export interface ThreadCreateWithoutAttachInput {
  user: UserCreateOneInput;
  forum: ForumCreateOneInput;
  subject: String;
  active?: Boolean;
  postCount?: Int;
  post?: PostCreateManyWithoutThreadInput;
  top?: Boolean;
  closed?: Boolean;
  diamond?: Boolean;
}

export interface PostCreateManyWithoutThreadInput {
  create?: PostCreateWithoutThreadInput[] | PostCreateWithoutThreadInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutThreadInput {
  forum: ForumCreateOneWithoutLastPostInput;
  user: UserCreateOneInput;
  isFirst?: Boolean;
  quote?: Int;
  message: String;
}

export interface AttachUpdateInput {
  user?: UserUpdateOneRequiredInput;
  post?: PostUpdateOneRequiredInput;
  thread?: ThreadUpdateOneRequiredWithoutAttachInput;
  forum?: ForumUpdateOneRequiredInput;
  filesize?: Int;
  downloads?: Int;
  fileName?: String;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  username?: String;
  active?: Boolean;
  mobile?: String;
  avatar?: String;
  userid?: String;
  isAdmin?: Boolean;
  group?: GroupUpdateManyWithoutMasterInput;
  posts?: Int;
  lastLogin?: DateTimeInput;
  signature?: String;
  mentor?: UserUpdateOneInput;
}

export interface GroupUpdateManyWithoutMasterInput {
  create?: GroupCreateWithoutMasterInput[] | GroupCreateWithoutMasterInput;
  delete?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  disconnect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  update?:
    | GroupUpdateWithWhereUniqueWithoutMasterInput[]
    | GroupUpdateWithWhereUniqueWithoutMasterInput;
  upsert?:
    | GroupUpsertWithWhereUniqueWithoutMasterInput[]
    | GroupUpsertWithWhereUniqueWithoutMasterInput;
  deleteMany?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  updateMany?:
    | GroupUpdateManyWithWhereNestedInput[]
    | GroupUpdateManyWithWhereNestedInput;
}

export interface GroupUpdateWithWhereUniqueWithoutMasterInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutMasterDataInput;
}

export interface GroupUpdateWithoutMasterDataInput {
  name?: String;
  key?: Int;
}

export interface GroupUpsertWithWhereUniqueWithoutMasterInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutMasterDataInput;
  create: GroupCreateWithoutMasterInput;
}

export interface GroupScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  key?: Int;
  key_not?: Int;
  key_in?: Int[] | Int;
  key_not_in?: Int[] | Int;
  key_lt?: Int;
  key_lte?: Int;
  key_gt?: Int;
  key_gte?: Int;
  AND?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  OR?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  NOT?: GroupScalarWhereInput[] | GroupScalarWhereInput;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface GroupUpdateManyDataInput {
  name?: String;
  key?: Int;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PostUpdateOneRequiredInput {
  create?: PostCreateInput;
  update?: PostUpdateDataInput;
  upsert?: PostUpsertNestedInput;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateDataInput {
  forum?: ForumUpdateOneRequiredWithoutLastPostInput;
  user?: UserUpdateOneRequiredInput;
  thread?: ThreadUpdateOneRequiredWithoutPostInput;
  isFirst?: Boolean;
  quote?: Int;
  message?: String;
}

export interface ForumUpdateOneRequiredWithoutLastPostInput {
  create?: ForumCreateWithoutLastPostInput;
  update?: ForumUpdateWithoutLastPostDataInput;
  upsert?: ForumUpsertWithoutLastPostInput;
  connect?: ForumWhereUniqueInput;
}

export interface ForumUpdateWithoutLastPostDataInput {
  name?: String;
  threads?: Int;
}

export interface ForumUpsertWithoutLastPostInput {
  update: ForumUpdateWithoutLastPostDataInput;
  create: ForumCreateWithoutLastPostInput;
}

export interface ThreadUpdateOneRequiredWithoutPostInput {
  create?: ThreadCreateWithoutPostInput;
  update?: ThreadUpdateWithoutPostDataInput;
  upsert?: ThreadUpsertWithoutPostInput;
  connect?: ThreadWhereUniqueInput;
}

export interface ThreadUpdateWithoutPostDataInput {
  user?: UserUpdateOneRequiredInput;
  forum?: ForumUpdateOneRequiredInput;
  subject?: String;
  active?: Boolean;
  postCount?: Int;
  top?: Boolean;
  closed?: Boolean;
  diamond?: Boolean;
  attach?: AttachUpdateManyWithoutThreadInput;
}

export interface ForumUpdateOneRequiredInput {
  create?: ForumCreateInput;
  update?: ForumUpdateDataInput;
  upsert?: ForumUpsertNestedInput;
  connect?: ForumWhereUniqueInput;
}

export interface ForumUpdateDataInput {
  name?: String;
  threads?: Int;
  lastPost?: PostUpdateOneWithoutForumInput;
}

export interface PostUpdateOneWithoutForumInput {
  create?: PostCreateWithoutForumInput;
  update?: PostUpdateWithoutForumDataInput;
  upsert?: PostUpsertWithoutForumInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateWithoutForumDataInput {
  user?: UserUpdateOneRequiredInput;
  thread?: ThreadUpdateOneRequiredWithoutPostInput;
  isFirst?: Boolean;
  quote?: Int;
  message?: String;
}

export interface PostUpsertWithoutForumInput {
  update: PostUpdateWithoutForumDataInput;
  create: PostCreateWithoutForumInput;
}

export interface ForumUpsertNestedInput {
  update: ForumUpdateDataInput;
  create: ForumCreateInput;
}

export interface AttachUpdateManyWithoutThreadInput {
  create?: AttachCreateWithoutThreadInput[] | AttachCreateWithoutThreadInput;
  delete?: AttachWhereUniqueInput[] | AttachWhereUniqueInput;
  connect?: AttachWhereUniqueInput[] | AttachWhereUniqueInput;
  disconnect?: AttachWhereUniqueInput[] | AttachWhereUniqueInput;
  update?:
    | AttachUpdateWithWhereUniqueWithoutThreadInput[]
    | AttachUpdateWithWhereUniqueWithoutThreadInput;
  upsert?:
    | AttachUpsertWithWhereUniqueWithoutThreadInput[]
    | AttachUpsertWithWhereUniqueWithoutThreadInput;
  deleteMany?: AttachScalarWhereInput[] | AttachScalarWhereInput;
  updateMany?:
    | AttachUpdateManyWithWhereNestedInput[]
    | AttachUpdateManyWithWhereNestedInput;
}

export interface AttachUpdateWithWhereUniqueWithoutThreadInput {
  where: AttachWhereUniqueInput;
  data: AttachUpdateWithoutThreadDataInput;
}

export interface AttachUpdateWithoutThreadDataInput {
  user?: UserUpdateOneRequiredInput;
  post?: PostUpdateOneRequiredInput;
  forum?: ForumUpdateOneRequiredInput;
  filesize?: Int;
  downloads?: Int;
  fileName?: String;
}

export interface AttachUpsertWithWhereUniqueWithoutThreadInput {
  where: AttachWhereUniqueInput;
  update: AttachUpdateWithoutThreadDataInput;
  create: AttachCreateWithoutThreadInput;
}

export interface AttachScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  filesize?: Int;
  filesize_not?: Int;
  filesize_in?: Int[] | Int;
  filesize_not_in?: Int[] | Int;
  filesize_lt?: Int;
  filesize_lte?: Int;
  filesize_gt?: Int;
  filesize_gte?: Int;
  downloads?: Int;
  downloads_not?: Int;
  downloads_in?: Int[] | Int;
  downloads_not_in?: Int[] | Int;
  downloads_lt?: Int;
  downloads_lte?: Int;
  downloads_gt?: Int;
  downloads_gte?: Int;
  fileName?: String;
  fileName_not?: String;
  fileName_in?: String[] | String;
  fileName_not_in?: String[] | String;
  fileName_lt?: String;
  fileName_lte?: String;
  fileName_gt?: String;
  fileName_gte?: String;
  fileName_contains?: String;
  fileName_not_contains?: String;
  fileName_starts_with?: String;
  fileName_not_starts_with?: String;
  fileName_ends_with?: String;
  fileName_not_ends_with?: String;
  AND?: AttachScalarWhereInput[] | AttachScalarWhereInput;
  OR?: AttachScalarWhereInput[] | AttachScalarWhereInput;
  NOT?: AttachScalarWhereInput[] | AttachScalarWhereInput;
}

export interface AttachUpdateManyWithWhereNestedInput {
  where: AttachScalarWhereInput;
  data: AttachUpdateManyDataInput;
}

export interface AttachUpdateManyDataInput {
  filesize?: Int;
  downloads?: Int;
  fileName?: String;
}

export interface ThreadUpsertWithoutPostInput {
  update: ThreadUpdateWithoutPostDataInput;
  create: ThreadCreateWithoutPostInput;
}

export interface PostUpsertNestedInput {
  update: PostUpdateDataInput;
  create: PostCreateInput;
}

export interface ThreadUpdateOneRequiredWithoutAttachInput {
  create?: ThreadCreateWithoutAttachInput;
  update?: ThreadUpdateWithoutAttachDataInput;
  upsert?: ThreadUpsertWithoutAttachInput;
  connect?: ThreadWhereUniqueInput;
}

export interface ThreadUpdateWithoutAttachDataInput {
  user?: UserUpdateOneRequiredInput;
  forum?: ForumUpdateOneRequiredInput;
  subject?: String;
  active?: Boolean;
  postCount?: Int;
  post?: PostUpdateManyWithoutThreadInput;
  top?: Boolean;
  closed?: Boolean;
  diamond?: Boolean;
}

export interface PostUpdateManyWithoutThreadInput {
  create?: PostCreateWithoutThreadInput[] | PostCreateWithoutThreadInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutThreadInput[]
    | PostUpdateWithWhereUniqueWithoutThreadInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutThreadInput[]
    | PostUpsertWithWhereUniqueWithoutThreadInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutThreadInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutThreadDataInput;
}

export interface PostUpdateWithoutThreadDataInput {
  forum?: ForumUpdateOneRequiredWithoutLastPostInput;
  user?: UserUpdateOneRequiredInput;
  isFirst?: Boolean;
  quote?: Int;
  message?: String;
}

export interface PostUpsertWithWhereUniqueWithoutThreadInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutThreadDataInput;
  create: PostCreateWithoutThreadInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isFirst?: Boolean;
  isFirst_not?: Boolean;
  quote?: Int;
  quote_not?: Int;
  quote_in?: Int[] | Int;
  quote_not_in?: Int[] | Int;
  quote_lt?: Int;
  quote_lte?: Int;
  quote_gt?: Int;
  quote_gte?: Int;
  message?: String;
  message_not?: String;
  message_in?: String[] | String;
  message_not_in?: String[] | String;
  message_lt?: String;
  message_lte?: String;
  message_gt?: String;
  message_gte?: String;
  message_contains?: String;
  message_not_contains?: String;
  message_starts_with?: String;
  message_not_starts_with?: String;
  message_ends_with?: String;
  message_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  isFirst?: Boolean;
  quote?: Int;
  message?: String;
}

export interface ThreadUpsertWithoutAttachInput {
  update: ThreadUpdateWithoutAttachDataInput;
  create: ThreadCreateWithoutAttachInput;
}

export interface AttachUpdateManyMutationInput {
  filesize?: Int;
  downloads?: Int;
  fileName?: String;
}

export interface ForumUpdateInput {
  name?: String;
  threads?: Int;
  lastPost?: PostUpdateOneWithoutForumInput;
}

export interface ForumUpdateManyMutationInput {
  name?: String;
  threads?: Int;
}

export interface GroupCreateInput {
  name: String;
  master?: UserCreateOneWithoutGroupInput;
  key: Int;
}

export interface UserCreateOneWithoutGroupInput {
  create?: UserCreateWithoutGroupInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutGroupInput {
  username: String;
  active?: Boolean;
  mobile?: String;
  avatar?: String;
  userid: String;
  isAdmin?: Boolean;
  posts?: Int;
  lastLogin: DateTimeInput;
  signature?: String;
  mentor?: UserCreateOneInput;
}

export interface GroupUpdateInput {
  name?: String;
  master?: UserUpdateOneWithoutGroupInput;
  key?: Int;
}

export interface UserUpdateOneWithoutGroupInput {
  create?: UserCreateWithoutGroupInput;
  update?: UserUpdateWithoutGroupDataInput;
  upsert?: UserUpsertWithoutGroupInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutGroupDataInput {
  username?: String;
  active?: Boolean;
  mobile?: String;
  avatar?: String;
  userid?: String;
  isAdmin?: Boolean;
  posts?: Int;
  lastLogin?: DateTimeInput;
  signature?: String;
  mentor?: UserUpdateOneInput;
}

export interface UserUpsertWithoutGroupInput {
  update: UserUpdateWithoutGroupDataInput;
  create: UserCreateWithoutGroupInput;
}

export interface GroupUpdateManyMutationInput {
  name?: String;
  key?: Int;
}

export interface MessageCreateInput {
  fromUser: UserCreateOneInput;
  toUser: UserCreateOneInput;
  message: String;
  isRead?: Boolean;
}

export interface MessageUpdateInput {
  fromUser?: UserUpdateOneRequiredInput;
  toUser?: UserUpdateOneRequiredInput;
  message?: String;
  isRead?: Boolean;
}

export interface MessageUpdateManyMutationInput {
  message?: String;
  isRead?: Boolean;
}

export interface PostUpdateInput {
  forum?: ForumUpdateOneRequiredWithoutLastPostInput;
  user?: UserUpdateOneRequiredInput;
  thread?: ThreadUpdateOneRequiredWithoutPostInput;
  isFirst?: Boolean;
  quote?: Int;
  message?: String;
}

export interface PostUpdateManyMutationInput {
  isFirst?: Boolean;
  quote?: Int;
  message?: String;
}

export interface ThreadCreateInput {
  user: UserCreateOneInput;
  forum: ForumCreateOneInput;
  subject: String;
  active?: Boolean;
  postCount?: Int;
  post?: PostCreateManyWithoutThreadInput;
  top?: Boolean;
  closed?: Boolean;
  diamond?: Boolean;
  attach?: AttachCreateManyWithoutThreadInput;
}

export interface ThreadUpdateInput {
  user?: UserUpdateOneRequiredInput;
  forum?: ForumUpdateOneRequiredInput;
  subject?: String;
  active?: Boolean;
  postCount?: Int;
  post?: PostUpdateManyWithoutThreadInput;
  top?: Boolean;
  closed?: Boolean;
  diamond?: Boolean;
  attach?: AttachUpdateManyWithoutThreadInput;
}

export interface ThreadUpdateManyMutationInput {
  subject?: String;
  active?: Boolean;
  postCount?: Int;
  top?: Boolean;
  closed?: Boolean;
  diamond?: Boolean;
}

export interface UserUpdateInput {
  username?: String;
  active?: Boolean;
  mobile?: String;
  avatar?: String;
  userid?: String;
  isAdmin?: Boolean;
  group?: GroupUpdateManyWithoutMasterInput;
  posts?: Int;
  lastLogin?: DateTimeInput;
  signature?: String;
  mentor?: UserUpdateOneInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  active?: Boolean;
  mobile?: String;
  avatar?: String;
  userid?: String;
  isAdmin?: Boolean;
  posts?: Int;
  lastLogin?: DateTimeInput;
  signature?: String;
}

export interface AttachSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AttachWhereInput;
  AND?: AttachSubscriptionWhereInput[] | AttachSubscriptionWhereInput;
  OR?: AttachSubscriptionWhereInput[] | AttachSubscriptionWhereInput;
  NOT?: AttachSubscriptionWhereInput[] | AttachSubscriptionWhereInput;
}

export interface ForumSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ForumWhereInput;
  AND?: ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput;
  OR?: ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput;
  NOT?: ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GroupWhereInput;
  AND?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  OR?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  NOT?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface ThreadSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ThreadWhereInput;
  AND?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
  OR?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
  NOT?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Attach {
  id: ID_Output;
  filesize: Int;
  downloads: Int;
  fileName: String;
}

export interface AttachPromise extends Promise<Attach>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  thread: <T = ThreadPromise>() => T;
  forum: <T = ForumPromise>() => T;
  filesize: () => Promise<Int>;
  downloads: () => Promise<Int>;
  fileName: () => Promise<String>;
}

export interface AttachSubscription
  extends Promise<AsyncIterator<Attach>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  thread: <T = ThreadSubscription>() => T;
  forum: <T = ForumSubscription>() => T;
  filesize: () => Promise<AsyncIterator<Int>>;
  downloads: () => Promise<AsyncIterator<Int>>;
  fileName: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  username: String;
  active: Boolean;
  mobile: String;
  avatar: String;
  userid: String;
  isAdmin: Boolean;
  posts: Int;
  lastLogin: DateTimeOutput;
  signature: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  active: () => Promise<Boolean>;
  mobile: () => Promise<String>;
  avatar: () => Promise<String>;
  userid: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  group: <T = FragmentableArray<Group>>(
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: () => Promise<Int>;
  lastLogin: () => Promise<DateTimeOutput>;
  signature: () => Promise<String>;
  mentor: <T = UserPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  mobile: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  userid: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  group: <T = Promise<AsyncIterator<GroupSubscription>>>(
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: () => Promise<AsyncIterator<Int>>;
  lastLogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  signature: () => Promise<AsyncIterator<String>>;
  mentor: <T = UserSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  name: String;
  key: Int;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  master: <T = UserPromise>() => T;
  key: () => Promise<Int>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  master: <T = UserSubscription>() => T;
  key: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  isFirst: Boolean;
  quote: Int;
  message: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  forum: <T = ForumPromise>() => T;
  user: <T = UserPromise>() => T;
  thread: <T = ThreadPromise>() => T;
  isFirst: () => Promise<Boolean>;
  quote: () => Promise<Int>;
  message: () => Promise<String>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  forum: <T = ForumSubscription>() => T;
  user: <T = UserSubscription>() => T;
  thread: <T = ThreadSubscription>() => T;
  isFirst: () => Promise<AsyncIterator<Boolean>>;
  quote: () => Promise<AsyncIterator<Int>>;
  message: () => Promise<AsyncIterator<String>>;
}

export interface Forum {
  id: ID_Output;
  name: String;
  threads: Int;
}

export interface ForumPromise extends Promise<Forum>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  threads: () => Promise<Int>;
  lastPost: <T = PostPromise>() => T;
}

export interface ForumSubscription
  extends Promise<AsyncIterator<Forum>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  threads: () => Promise<AsyncIterator<Int>>;
  lastPost: <T = PostSubscription>() => T;
}

export interface Thread {
  id: ID_Output;
  subject: String;
  active: Boolean;
  postCount: Int;
  top: Boolean;
  closed: Boolean;
  diamond: Boolean;
}

export interface ThreadPromise extends Promise<Thread>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  forum: <T = ForumPromise>() => T;
  subject: () => Promise<String>;
  active: () => Promise<Boolean>;
  postCount: () => Promise<Int>;
  post: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  top: () => Promise<Boolean>;
  closed: () => Promise<Boolean>;
  diamond: () => Promise<Boolean>;
  attach: <T = FragmentableArray<Attach>>(
    args?: {
      where?: AttachWhereInput;
      orderBy?: AttachOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ThreadSubscription
  extends Promise<AsyncIterator<Thread>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  forum: <T = ForumSubscription>() => T;
  subject: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  postCount: () => Promise<AsyncIterator<Int>>;
  post: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  top: () => Promise<AsyncIterator<Boolean>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
  diamond: () => Promise<AsyncIterator<Boolean>>;
  attach: <T = Promise<AsyncIterator<AttachSubscription>>>(
    args?: {
      where?: AttachWhereInput;
      orderBy?: AttachOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AttachConnection {
  pageInfo: PageInfo;
  edges: AttachEdge[];
}

export interface AttachConnectionPromise
  extends Promise<AttachConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttachEdge>>() => T;
  aggregate: <T = AggregateAttachPromise>() => T;
}

export interface AttachConnectionSubscription
  extends Promise<AsyncIterator<AttachConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttachEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttachSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AttachEdge {
  node: Attach;
  cursor: String;
}

export interface AttachEdgePromise extends Promise<AttachEdge>, Fragmentable {
  node: <T = AttachPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttachEdgeSubscription
  extends Promise<AsyncIterator<AttachEdge>>,
    Fragmentable {
  node: <T = AttachSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttach {
  count: Int;
}

export interface AggregateAttachPromise
  extends Promise<AggregateAttach>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttachSubscription
  extends Promise<AsyncIterator<AggregateAttach>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ForumConnection {
  pageInfo: PageInfo;
  edges: ForumEdge[];
}

export interface ForumConnectionPromise
  extends Promise<ForumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ForumEdge>>() => T;
  aggregate: <T = AggregateForumPromise>() => T;
}

export interface ForumConnectionSubscription
  extends Promise<AsyncIterator<ForumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ForumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateForumSubscription>() => T;
}

export interface ForumEdge {
  node: Forum;
  cursor: String;
}

export interface ForumEdgePromise extends Promise<ForumEdge>, Fragmentable {
  node: <T = ForumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ForumEdgeSubscription
  extends Promise<AsyncIterator<ForumEdge>>,
    Fragmentable {
  node: <T = ForumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateForum {
  count: Int;
}

export interface AggregateForumPromise
  extends Promise<AggregateForum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateForumSubscription
  extends Promise<AsyncIterator<AggregateForum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Message {
  id: ID_Output;
  message: String;
  isRead: Boolean;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  fromUser: <T = UserPromise>() => T;
  toUser: <T = UserPromise>() => T;
  message: () => Promise<String>;
  isRead: () => Promise<Boolean>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fromUser: <T = UserSubscription>() => T;
  toUser: <T = UserSubscription>() => T;
  message: () => Promise<AsyncIterator<String>>;
  isRead: () => Promise<AsyncIterator<Boolean>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ThreadConnection {
  pageInfo: PageInfo;
  edges: ThreadEdge[];
}

export interface ThreadConnectionPromise
  extends Promise<ThreadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ThreadEdge>>() => T;
  aggregate: <T = AggregateThreadPromise>() => T;
}

export interface ThreadConnectionSubscription
  extends Promise<AsyncIterator<ThreadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ThreadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateThreadSubscription>() => T;
}

export interface ThreadEdge {
  node: Thread;
  cursor: String;
}

export interface ThreadEdgePromise extends Promise<ThreadEdge>, Fragmentable {
  node: <T = ThreadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ThreadEdgeSubscription
  extends Promise<AsyncIterator<ThreadEdge>>,
    Fragmentable {
  node: <T = ThreadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateThread {
  count: Int;
}

export interface AggregateThreadPromise
  extends Promise<AggregateThread>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateThreadSubscription
  extends Promise<AsyncIterator<AggregateThread>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AttachSubscriptionPayload {
  mutation: MutationType;
  node: Attach;
  updatedFields: String[];
  previousValues: AttachPreviousValues;
}

export interface AttachSubscriptionPayloadPromise
  extends Promise<AttachSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttachPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttachPreviousValuesPromise>() => T;
}

export interface AttachSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttachSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttachSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttachPreviousValuesSubscription>() => T;
}

export interface AttachPreviousValues {
  id: ID_Output;
  filesize: Int;
  downloads: Int;
  fileName: String;
}

export interface AttachPreviousValuesPromise
  extends Promise<AttachPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  filesize: () => Promise<Int>;
  downloads: () => Promise<Int>;
  fileName: () => Promise<String>;
}

export interface AttachPreviousValuesSubscription
  extends Promise<AsyncIterator<AttachPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  filesize: () => Promise<AsyncIterator<Int>>;
  downloads: () => Promise<AsyncIterator<Int>>;
  fileName: () => Promise<AsyncIterator<String>>;
}

export interface ForumSubscriptionPayload {
  mutation: MutationType;
  node: Forum;
  updatedFields: String[];
  previousValues: ForumPreviousValues;
}

export interface ForumSubscriptionPayloadPromise
  extends Promise<ForumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ForumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ForumPreviousValuesPromise>() => T;
}

export interface ForumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ForumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ForumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ForumPreviousValuesSubscription>() => T;
}

export interface ForumPreviousValues {
  id: ID_Output;
  name: String;
  threads: Int;
}

export interface ForumPreviousValuesPromise
  extends Promise<ForumPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  threads: () => Promise<Int>;
}

export interface ForumPreviousValuesSubscription
  extends Promise<AsyncIterator<ForumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  threads: () => Promise<AsyncIterator<Int>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  key: Int;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  key: () => Promise<Int>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<Int>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  message: String;
  isRead: Boolean;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
  isRead: () => Promise<Boolean>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
  isRead: () => Promise<AsyncIterator<Boolean>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  isFirst: Boolean;
  quote: Int;
  message: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isFirst: () => Promise<Boolean>;
  quote: () => Promise<Int>;
  message: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isFirst: () => Promise<AsyncIterator<Boolean>>;
  quote: () => Promise<AsyncIterator<Int>>;
  message: () => Promise<AsyncIterator<String>>;
}

export interface ThreadSubscriptionPayload {
  mutation: MutationType;
  node: Thread;
  updatedFields: String[];
  previousValues: ThreadPreviousValues;
}

export interface ThreadSubscriptionPayloadPromise
  extends Promise<ThreadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ThreadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ThreadPreviousValuesPromise>() => T;
}

export interface ThreadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ThreadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ThreadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ThreadPreviousValuesSubscription>() => T;
}

export interface ThreadPreviousValues {
  id: ID_Output;
  subject: String;
  active: Boolean;
  postCount: Int;
  top: Boolean;
  closed: Boolean;
  diamond: Boolean;
}

export interface ThreadPreviousValuesPromise
  extends Promise<ThreadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  active: () => Promise<Boolean>;
  postCount: () => Promise<Int>;
  top: () => Promise<Boolean>;
  closed: () => Promise<Boolean>;
  diamond: () => Promise<Boolean>;
}

export interface ThreadPreviousValuesSubscription
  extends Promise<AsyncIterator<ThreadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  postCount: () => Promise<AsyncIterator<Int>>;
  top: () => Promise<AsyncIterator<Boolean>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
  diamond: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  active: Boolean;
  mobile: String;
  avatar: String;
  userid: String;
  isAdmin: Boolean;
  posts: Int;
  lastLogin: DateTimeOutput;
  signature: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  active: () => Promise<Boolean>;
  mobile: () => Promise<String>;
  avatar: () => Promise<String>;
  userid: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  posts: () => Promise<Int>;
  lastLogin: () => Promise<DateTimeOutput>;
  signature: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  mobile: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  userid: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  posts: () => Promise<AsyncIterator<Int>>;
  lastLogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  signature: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Attach",
    embedded: false
  },
  {
    name: "Forum",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Thread",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
